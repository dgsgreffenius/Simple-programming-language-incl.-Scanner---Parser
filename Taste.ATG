COMPILER Taste

	const int // types
	  undef = 0, integer = 1, boolean = 2, str = 3;

	const int // object kinds
	  var = 0, proc = 1, constant = 2;

	public SymbolTable   tab;
	public CodeGenerator gen;
  
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  otherChars = "`~!@#$%^&*()_-+={[}]|\\;:\'\"?/.>,<".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  dQuote = '"'.
  sQuote = '\''.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  strT = dQuote {letter | digit | otherChars} dQuote.
  charT = sQuote (letter | digit | otherChars) sQuote.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS
/*------------------------------------------------------------------------*/
AddOp<out Op op>
=                        (. op = Op.ADD; .)
  ( '+'
  | '-'                  (. op = Op.SUB; .)
  ).
/*------------------------------------------------------------------------*/
ConstDecl 					(. Obj obj; int type; string name; .)
=  	"constant"
	Ident<out name>			
	":="		
	Expr<out type> 			(. tab.NewObj(name, constant, type); obj = tab.Find(name);
								if(obj.level==0) gen.Emit(Op.STOG, obj.adr);
									else gen.Emit(Op.STO, obj.adr); .)
							
	{ ','
		ConstDecl
	} ';'.
/*------------------------------------------------------------------------*/
Expr<out int type>       (. int type1; Op op; .)
= SimExpr<out type>
  [ RelOp<out op>
    SimExpr<out type1>   (. if (type != type1) SemErr("incompatible types");
                            gen.Emit(op); type = boolean; .)
  ].
/*------------------------------------------------------------------------*/
Factor<out int type>     (. int n, adr; Obj obj; string name; string s; .)
=                        (. type = undef; .)
  ( '(' Expr<out type> ')' 
  | Ident<out name>      (. obj = tab.Find(name); type = obj.type; adr = obj.adr; .)
	(
		'['				 (. if(!obj.isArray) SemErr("Not an array"); .)
			number		 (. n = Convert.ToInt32(t.val); 
							if( n > obj.size || n < 1) SemErr("Run-time exception - array index out of bounds"); 
							else adr = adr + (n-1); .)
								
		']'
	|					 (. if(obj.isArray) SemErr("Index of array missing"); .)
	) 
                         (.  if (obj.kind == var || obj.kind == constant) {
								if (obj.level == 0) gen.Emit(Op.LOADG, adr);
									else gen.Emit(Op.LOAD, adr);
                            } else SemErr("variable or constant expected"); .)
  | number               (. n = Convert.ToInt32(t.val); 
                            gen.Emit(Op.CONST, n); type = integer; .)
  | '-'
    Factor<out type>     (. if (type != integer) {
                              SemErr("integer type expected"); type = integer;
                            }
                            gen.Emit(Op.NEG); .)
  | "true"               (. gen.Emit(Op.CONST, 1); type = boolean; .)
  | "false"              (. gen.Emit(Op.CONST, 0); type = boolean; .)
  | 
    strT 			 (. s = Convert.ToString(t.val); 
								gen.Emit(Op.STR, s, s.Length); type = str; .)

  |
	charT 			 (. s = Convert.ToString(t.val); 
								gen.Emit(Op.STR, s, 3); type = str; .)
  ).
/*------------------------------------------------------------------------*/
Ident<out string name>
= ident                  (. name = t.val; .).
/*------------------------------------------------------------------------*/
MulOp<out Op op>
=                        (. op = Op.MUL; .)
  ( '*'
  | '/'                  (. op = Op.DIV; .)
  ).
/*------------------------------------------------------------------------*/
ProcDecl                 (. string name; Obj obj; int adr; .)
= "void"
  Ident<out name>        (. obj = tab.NewObj(name, proc, undef); obj.adr = gen.pc;
                            if (name == "Main") gen.progStart = gen.pc; 
                            tab.OpenScope(); .)
  '(' ')'
  '{'                    (. gen.Emit(Op.ENTER, 0); adr = gen.pc - 2; .)
  { ConstDecl | VarDecl | Stat }
  '}'                    (. gen.Emit(Op.LEAVE); gen.Emit(Op.RET);
                            gen.Patch(adr, tab.topScope.nextAdr);
                            tab.CloseScope(); .).
/*------------------------------------------------------------------------*/
RelOp<out Op op>
=                        (. op = Op.EQU; .)
  ( "=="
  | '<'                  (. op = Op.LSS; .)
  | '>'                  (. op = Op.GTR; .)
  | "!="				 (. op = Op.NEQ; .)
  | "<="				 (. op = Op.LSE; .)
  | ">="				 (. op = Op.GTE; .)
  ).
/*------------------------------------------------------------------------*/
SimExpr<out int type>    (. int type1; Op op; .)
= Term<out type>
  { AddOp<out op>
    Term<out type1>      (. if (type != integer || type1 != integer) 
                              SemErr("integer type expected");
                            gen.Emit(op); .)
	}.
/*------------------------------------------------------------------------*/
Stat                     (. int type; string name; Obj obj, obj1; int n;
                            int adr, adr2, adr3, loopstart; .)
= Ident<out name>        (. obj = tab.Find(name); adr3 = obj.adr; .)
  (	
	( '['				(. if(!obj.isArray) SemErr("Identifier is not an array"); .)
		number			(. n = Convert.ToInt32(t.val); 
							if( n > obj.size || n < 1) SemErr("Run-time exception - array index out of bounds"); 
								else adr3 = adr3 + (n-1); .)
		']'
	|					(. if(obj.isArray) SemErr("Array missing index"); .)
	)
	
  ":="                  (. if (obj.kind != var) SemErr("can only assign to variables"); .)
	
	( Expr<out type>
		( '?' 				(. if(type != boolean) SemErr("boolean type expected");
								gen.Emit(Op.FJMP, 0); adr = gen.pc - 2; .)
			Expr<out type> 	(. if(type != obj.type) SemErr("incompatible types");
								gen.Emit(Op.JMP, 0); adr2 = gen.pc - 2; .)

			':'				(. gen.Patch(adr, gen.pc) ; .)
		
		Expr<out type>  (. if(type != obj.type) SemErr("incompatible types");
								gen.Patch(adr2, gen.pc); .)
		
		|					(. if (type != obj.type) SemErr("incompatible types"); .)
		
		)					(. if (obj.level == 0) gen.Emit(Op.STOG, adr3);
								else gen.Emit(Op.STO, adr3); .)
	)							
	| '(' ')'          (. if (obj.kind != proc) SemErr("object is not a procedure");
							gen.Emit(Op.CALL, obj.adr); .)
	) ';'

| "if" 
	'(' Expr<out type> ')' (. if (type != boolean) SemErr("boolean type expected");
													  gen.Emit(Op.FJMP, 0); adr = gen.pc - 2; .)
	Stat
	[ "else"               (. gen.Emit(Op.JMP, 0); adr2 = gen.pc - 2;
													  gen.Patch(adr, gen.pc);
													  adr = adr2; .)
		Stat 
	]                      (. gen.Patch(adr, gen.pc); .)

| "while"                (. loopstart = gen.pc; .)
	'(' Expr<out type> ')' (. if (type != boolean) SemErr("boolean type expected");
													  gen.Emit(Op.FJMP, 0); adr = gen.pc - 2; .)
	Stat                   (. gen.Emit(Op.JMP, loopstart); gen.Patch(adr, gen.pc); .)

| "do"							(. loopstart = gen.pc; .)
	Stat
	"while"
	'(' Expr<out type> ");"		(. if (type != boolean) SemErr("boolean type expected");
									gen.Emit(Op.FJMP, 0); adr = gen.pc - 2; .)
									(. gen.Emit(Op.JMP, loopstart); gen.Patch(adr, gen.pc); .)
	
| "read"
	Ident<out name> ';'    (. obj = tab.Find(name);
													  if (obj.type != integer) SemErr("integer type expected");
													  gen.Emit(Op.READ);
													  if (obj.level == 0) gen.Emit(Op.STOG, obj.adr);
													  else gen.Emit(Op.STO, obj.adr); .)

| "write" 
	Expr<out type>      (. if (type != integer && type != str) SemErr("integer or string type expected");
							if(type == integer)  gen.Emit(Op.WRITE); 
							else gen.Emit(Op.WRITES); .)
	{
	','				(. gen.Emit(Op.WRITEC); .)
	Expr<out type>		(. if (type != integer && type != str) SemErr("integer or string type expected");
						   if(type == integer) gen.Emit(Op.WRITE); 
						   else gen.Emit(Op.WRITES); .)
	} ';'				(. gen.Emit(Op.WRITEL); .)

| '{' { Stat | VarDecl } '}'

|   "for"
	Ident<out name>			(. obj = tab.Find(name); if(obj.kind != var && obj.type != integer) SemErr("integer variable needed in for loop"); .)
	":=" 
	(number 				(. n = Convert.ToInt32(t.val);
									gen.Emit(Op.CONST, n); .)
	| 
	
	Ident<out name>		(. obj1 = tab.Find(name); if(obj1.kind != constant && obj1.type != integer) SemErr("integer constant expected"); 
									if(obj1.level==0) gen.Emit(Op.LOADG, obj1.adr);
										else gen.Emit(Op.LOAD, obj1.adr);
									.)
	)						(. if(obj.level==0) gen.Emit(Op.STOG, obj.adr);
								else gen.Emit(Op.STO, obj.adr); .)
							
							(. loopstart = gen.pc; .)
							
							(. if (obj.level == 0) gen.Emit(Op.LOADG, obj.adr);
								else gen.Emit(Op.LOAD, obj.adr); .)	
	"to"					
	( number 					(. n = Convert.ToInt32(t.val); type = integer;
									gen.Emit(Op.CONST, n); .)
	| 
	
	Ident<out name>		(. obj1 = tab.Find(name); if(obj1.kind != constant && obj1.type != integer) SemErr("integer constant expected"); 
									if(obj1.level==0) gen.Emit(Op.LOADG, obj1.adr);
										else gen.Emit(Op.LOAD, obj1.adr); .)
										
	)						
							(. gen.Emit(Op.LSE); gen.Emit(Op.FJMP, 0); adr = gen.pc - 2; .)
	"do"
	
	Stat					(. if(obj.level==0) gen.Emit(Op.LOAD, obj.adr); 
								else gen.Emit(Op.LOADG, obj.adr); .)
							(.	gen.Emit(Op.CONST, 1); gen.Emit(Op.ADD); .)
							(.	if(obj.level==0) gen.Emit(Op.STOG, obj.adr);
								else gen.Emit(Op.STO, obj.adr); .)
							(. gen.Emit(Op.JMP, loopstart); gen.Patch(adr, gen.pc); .)
	.
/*------------------------------------------------------------------------*/
Taste                    (. string name; .)
= "program"
  Ident<out name>        (. tab.OpenScope(); .)
  '{'
  { ConstDecl | VarDecl | ProcDecl }
  '}'                    (. tab.CloseScope();
                            if (gen.progStart == -1) SemErr("main function never defined");
                            .).
/*------------------------------------------------------------------------*/
Term<out int type>       (. int type1; Op op; .)
= Factor<out type>
  { MulOp<out op>
    Factor<out type1>    (. if (type != integer || type1 != integer) 
                              SemErr("integer type expected");
                            gen.Emit(op); .)
	}.
/*------------------------------------------------------------------------*/
Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 | "string"				 (. type = str; .)
 | "char" 				 (. type = str; .)
 ).
/*------------------------------------------------------------------------*/
VarDecl                  (. string name; int type, n=0; Obj obj;.)
= Type<out type>
  Ident<out name>        (. tab.NewObj(name, var, type); .)
  [ 
  '['					 
	number				(. n = Convert.ToInt32(t.val); if(type != integer) SemErr("integer type expected for array");
						   if(n<1) SemErr("Array size must be a positive integer");
						   tab.toArray(name, n); obj = tab.Find(name);
						   if(obj.level == 0) gen.Emit(Op.STOGA, obj.adr, n);
							else gen.Emit(Op.STOA, obj.adr, n); .)
	']'
  ]
  
  
  
  { ',' Ident<out name>  (. tab.NewObj(name, var, type); .)
	[ 
	  '['					 
		number		(. n = Convert.ToInt32(t.val); if(type != integer) SemErr("integer type expected for array");
					   if(n<1) SemErr("Array size must be a positive integer");
					   tab.toArray(name, n); obj = tab.Find(name);
					   if(obj.level == 0) gen.Emit(Op.STOGA, obj.adr, n);
						else gen.Emit(Op.STOA, obj.adr, n); .)
		']'
	]
  } ';'.

END Taste.
